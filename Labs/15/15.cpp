// –§–æ–º–∏—á–µ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á, II –í–∞—Ä–∏–∞–Ω—Ç
// –õ–†15

/*
–û–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å, —Ä–µ–∞–ª–∏–∑—É—é—â–∏–π –±–∏–Ω–∞—Ä–Ω–æ–µ –¥–µ—Ä–µ–≤–æ, 
–æ–±–ª–∞–¥–∞—é—â–µ–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö 
—ç–ª–µ–º–µ–Ω—Ç–æ–≤, —É–¥–∞–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö, –ø–æ–∏—Å–∫–∞ 
—ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ –∫–ª—é—á—É, –∞ —Ç–∞–∫–∂–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ 
–¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —ç–ª–µ–º–µ–Ω—Ç–∞–º.
*/

// P.S. –ù–∞ a–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–∏–Ω–¥–µ –ª–∞–±–∞ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ç—Å—è
// –∏–∑-–∑–∞ —Ü—ã–≥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.cpp

#include <iostream>
using namespace std;
struct Node
{
	int value;
	Node *left;
	Node *right;
};

class Binary
{
public:
	Binary();
	~Binary();
	void insert(int key);
	Node *search(int key);
	void remove_tree();
	void inorder_print();
	void deleteNode(Node *&root, int key);

private:
	void remove_tree(Node *leaf);
	void insert(int key, Node *leaf);
	Node *search(int key, Node *leaf);
	void inorder_print(Node *leaf);
	Node *root;
};

Binary::Binary()
{
	root = NULL;
}

Binary::~Binary()
{
	remove_tree();
}

void Binary::remove_tree(Node *leaf)
{
	if (leaf != NULL)
	{
		remove_tree(leaf->left), remove_tree(leaf->right);
		delete leaf;
	}
}
void Binary::insert(int key, Node *leaf)
{
	if (key < leaf->value)
		if (leaf->left != NULL)
			insert(key, leaf->left);
		else
			leaf->left = new Node,
			leaf->left->value = key,
			leaf->left->left = NULL,
			leaf->left->right = NULL;
	else if (key >= leaf->value)
		if (leaf->right != NULL)
			insert(key, leaf->right);
		else
			leaf->right = new Node,
			leaf->right->value = key,
			leaf->right->right = NULL,
			leaf->right->left = NULL;
}
void Binary::insert(int key)
{
	if (root != NULL)
	{
		insert(key, root);
	}
	else
	{
		root = new Node;
		root->value = key;
		root->left = NULL;
		root->right = NULL;
	}
}

Node* Binary::search(int key, Node *leaf)
{
	if (leaf != NULL)
	{
		if (key == leaf->value)
			return leaf;
		if (key < leaf->value)
			return search(key, leaf->left);
		return search(key, leaf->right);
	}
	return NULL;
}
Node* getMinimumKey(Node* curr)
{
    while (curr->left != nullptr) {
        curr = curr->left;
    }
    return curr;
}
void searchKey(Node* &curr, int key, Node* &parent)
{
    while (curr != nullptr && curr->value != key)
    {
        parent = curr;
        if (key < curr->value)
            curr = curr->left;
        else
            curr = curr->right;
    }
}
// void deleteNode(Node *&root, int key)
// {
// 	Node *parent = nullptr;
// 	Node *curr = root;
// 	searchKey(curr, key, parent);
// 	if (curr == nullptr)
// 		return;
// 	if (curr->left == nullptr && curr->right == nullptr)
// 	{
// 		if (curr != root)
// 			if (parent->left == curr)
// 				parent->left = nullptr;
// 			else
// 				parent->right = nullptr;
// 		else
// 			root = nullptr;
// 		free(curr);
// 	}
// 	else if (curr->left && curr->right)
// 	{
// 		Node *successor = getMinimumKey(curr->right);
// 		int val = successor->value;
// 		deleteNode(root, successor->value);
// 		curr->value = val;
// 	}
// 	else
// 	{
// 		Node *child = (curr->left) ? curr->left : curr->right;
// 		if (curr != root)
// 			if (curr == parent->left)
// 				parent->left = child;
// 			else
// 				parent->right = child;
// 		else
// 			root = child;
// 		free(curr);
// 	}
// }
Node* Binary::search(int key)
{
	return search(key, root);
}

void Binary::remove_tree()
{
	remove_tree(root);
}

void Binary::inorder_print()
{
	inorder_print(root);
	cout << "\n";
}

void Binary::inorder_print(Node *leaf)
{
	if (leaf != NULL)
	{
		inorder_print(leaf->left);
		cout << leaf->value << " ";
		inorder_print(leaf->right);
	}
}

int main()
{
	Binary *T = new Binary();
	T->insert(10);
	T->insert(6);
	T->insert(14);
	T->inorder_print();
	delete T;
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
/*                                                  */
/*               –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—Ç–µ üòä             */
/*                                                  */
/* –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –¥–µ—Ä–µ–≤–∞, –∫–æ—Ç–æ—Ä—É—é     */
/* –º–æ–∂–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å –Ω–∞ –ª—é–±–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏ –Ω–∞        */
/* –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞, –¥–≤–∞ –º–µ—Ç–æ–¥–∞ search –∏ searchKey      */
/* –±—ã–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã     */
/* –ø–µ—Ä–≤–∞—è –∏—â–µ—Ç —É–∑–µ–ª –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é, –≤—Ç–æ—Ä–∞—è –Ω—É–∂–Ω–∞ –¥–ª—è   */
/* –ø–æ–∏—Å–∫–∞ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤ —Å–ª—É—á–∞–µ —É–¥–∞–ª–µ–Ω–∏—è —É–∑–ª–∞  */
/*                                                  */
/* –¢–∞–∫ –∂–µ –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª, –∫–∞–∫ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å   */
/* —É–¥–∞–ª–µ–Ω–∏–µ —É–∑–ª–∞, –ø–æ—ç—Ç–æ–º—É –Ω–∞–ø–∏—Å–∞–ª –º–æ—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ  */
/* –ø—Ä–æ—Ü–µ—Å—Å–∞, –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –º–æ—è –∑–∞–¥—É–º–∫–∞ –≤–µ—Ä–Ω–∞,       */
/* —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ç—å –∫–æ–¥ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.                */
/*                                                  */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
