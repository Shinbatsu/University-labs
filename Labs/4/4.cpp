// –§–æ–º–∏—á–µ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á, II –í–∞—Ä–∏–∞–Ω—Ç
// –õ–†4

/*
1 –ù–∞–π—Ç–∏ —Å—É–º–º—É –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
2 –ù–∞–π—Ç–∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞,
—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω—ã—Ö –º–µ–∂–¥—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –ø–æ
–º–æ–¥—É–ª—é –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –ø–æ –º–æ–¥—É–ª—é —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏.
3 –£–ø–æ—Ä—è–¥–æ—á–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
*/

#include <iostream>
#include <algorithm>
#include <cfloat>
using namespace std;

const int S = 8; // –†–∞–∑–º–µ—Ä –º–∞—Å—Å–∏–≤–∞

// C—É–º–º–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
double SP_(double *n)
{
  auto R = 0;
  for (int i = 0; i<S; R += n[i]> 0 ? n[i] : 0, i++)
    ;
  return R;
}
int main()
{
  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ
  auto SR_ = [](auto n)
  {
    sort(n, n + S, [](int a, int b)
         { return (a > b); });
  };
  auto MR_ = [](double *n, double R = 1.0)
  {
    // –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ
    auto MA_ = [](double *n)
    { 
      double R = DBL_MIN;  
      auto res = -1;
      for (auto i =0; i<S;abs(n[i])> R ? R = abs(n[i]),res = i:-0,i++);
      return res; };

    // –ù–∞—Ö–æ–∂–¥–µ–Ω–∏–µ –º–∏–Ω–∏–º—É–º–∞ –≤ –º–∞—Å—Å–∏–≤–µ
    auto MI_ = [](double *n)
    {
      double R = DBL_MAX;
      auto res = -1;
      for (auto i = 0; i < S; i++)
        abs(n[i]) < R ? R = abs(n[i]), res = i : 0;
      return res;
    };
    // absMin -> –ú–∏–Ω–∏–º—É–º –ø–æ –º–æ–¥—É–ª—é
    // absMax -> –ú–∞–∫—Å–∏–º—É–º –ø–æ –º–æ–¥—É–ª—é
    int absMin = MI_(n), absMax = MA_(n);
    for (auto i = min(absMin, absMax); i < max(absMin, absMax); R *= n[i], i++)
      ;
    return R;
  };
  double arr[] = {1, 2, 6, 89, 324, 6, 2, 4};
  cout << MR_(arr) << endl;
  system("PAUSE");
  return 0;
}

/*===========================================================*/

/*===========================================================*/
/*                                                           */
/*               –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—Ç–µ üòä                      */
/*                                                           */
/* R - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏                              */
/*                                                           */
/* S - –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞, —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ (—Ä–∞–≤–Ω–∞ 8–º–∏)        */
/*                                                           */
/* SP_ - –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ 1                         */
/* –ü—Ä–æ—Å—Ç–æ–π for —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å(>0) –∏          */
/* –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —ç—Ç–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤               */
/*                                                           */
/* MR_ - –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ 2                         */
/* –ü–æ–∏—Å–∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ –º–æ–¥—É–ª—é –≤—ã–ø–æ–ª–Ω–µ–Ω     */
/* —Å –ø–æ–º–æ—â—å—é –¥–≤—É—Ö lambda —Ñ—É–Ω–∫—Ü–∏–π MI_ –∏ MA_ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ    */
/* –†–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤—ã—Å—Ç—É–ø–∞–µ—Ç –∫–∞–∫ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü       */
/* —Ü–∏–∫–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.*/
/*                                                           */
/* SR_ - –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏–µ 3                         */
/* –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —Ñ—É–Ω–∫—Ü–∏–∏ sort             */
/* –≤ –Ω–µ–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü              */
/* –ø–æ—Å–ª–µ–¥–æ–≤–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Ç—Ä–µ—Ç–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç —ç—Ç–æ                  */
/* —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ç–æ—Ä–∞—è —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∏—Å–æ—Ä—Ç–∏—Ä—É–µ—Ç            */
/*                                                           */
/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã "main" - –∑–∞–¥–∞–Ω–∏–µ 2(—Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ)     */
/*                                                           */
/*===========================================================*/
/*===========================================================*/

//      #include < iostream>
//       #include < cfloat>
//       #include < chrono>
//       typedef double  d;
//       typedef   int  int;
//      using namespace std;
//      #include <algorithm>
//      int S=0x0a-2;d SP_(d
//      *n) { auto R=- - -0;
//      for(auto i=- - -0;i<
//    S;  R += n[i] > - - -0?n
//  [ i]:0,_++);return R ; } int
//  main( ) { auto G =  chrono::
//  steady_clock::now();auto SR_
//  =[]( auto n ){sort(n,n+S,[](
//  int a, int b ){return( a> b)
//  ;} );}; auto MR_=[](d *n,d R
//  =  1.0  ){ auto MA_=[](d *n)
//  { d R=DBL_MIN;auto res=-1e1;
//  for (auto i=- - -0;i<S;abs (
//  n[i])>R?R=abs(n[i]),res=_:0,
//  _++);return res;};auto MI_=[
//  ](d *n){d R=DBL_MAX;auto res
//  = -1e1; for (auto i= 0; _<S;
//  _++)abs(n[i])<R?R=abs(n[i]),
//  res =_:0;return res;};i1 t1=
//  MI_(n),t2=MA_(n);for(auto i=
//  min(t1,t2);i<max(t1,t2) ;R*=
//  n [i] , _++ ); return R ; };
//  d arr[]={1,rand()%50,-rand()
//  % 50,-0x217,rand()%50,rand()
//  % 50,74.0,-5};cout<<MR_(arr)
//  <<endl<<chrono::steady_clock
//  ::now()-G;return 11&&0x000;}
