// –§–æ–º–∏—á–µ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á, II –í–∞—Ä–∏–∞–Ω—Ç
// –õ–†16

/*
–°–æ–∑–¥–∞—Ç—å –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å Point(—Ç–æ—á–∫–∞). –ù–∞ –µ–≥–æ –æ—Å–Ω–æ–≤–µ 
—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å—ã ColoredPoint –∏ Line. –ù–∞ –æ—Å–Ω–æ–≤–µ –∫–ª–∞—Å—Å–∞ 
Line —Å–æ–∑–¥–∞—Ç—å —Å–æ–¥–∞—Ç—å –∫–ª–∞—Å—Å—ã ColoredLine –∏ PolyLine 
(–º–Ω–æ–≥–æ—É–≥–æ–ª—å–Ω–∏–∫). –í—Å–µ –∫–ª–∞—Å—Å—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ 
–º–µ—Ç–æ–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤—Å–µ—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç, 
–∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ü–≤–µ—Ç–∞.

–°–æ–∑–¥–∞—Ç—å –∫–ª–∞—Å—Å Picture —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Å–ø–∏—Å–æ–∫ (–∏–ª–∏ –º–∞—Å—Å–∏–≤) 
–æ–±—ä–µ–∫—Ç–æ–≤ —ç—Ç–∏—Ö –∫–ª–∞—Å—Å–æ–≤ –≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏. 
–ü—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ 
–æ–±—ä–µ–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–∞. –ù–∞–ø–∏—Å–∞—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É,
–≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–æ–≤.
*/

// P.S. –ù–∞ a–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–∏–Ω–¥–µ –ª–∞–±–∞ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ç—Å—è
// –∏–∑-–∑–∞ —Ü—ã–≥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.cpp

#include <vector>
#include <iostream>
typedef unsigned short ust;
using namespace std;
class Drawable
{
public:
    void virtual draw() = 0;
};
struct Color
{
private:
    ust r, g, b;

public:
    Color() : r(0), g(0), b(0) {}
    template <typename T>
    Color(T r, T g, T b) : r(min(r, 255)), g(min(g, 255)), b(min(b, 255)) {}
    void getColors()
    {
        cout << r << ", " << g << ", " << b;
    }
};
class Figure
{
    bool isFigure = true;
};
class IColored : public Drawable
{
private:
    Color color;

public:
    void setColor(Color clr)
    {
        this->color = clr;
    }
    Color *getColor()
    {
        return &color;
    }
    void draw()
    {
        cout << "Color is : ";
        this->getColor()->getColors();
    }
};

class Point : public Drawable, public Figure
{

private:
    double x, y;

public:
    void draw() override
    {
        cout << "Drawing a point with coodinates x: " << x << ", y: " << y << endl;
    }
    Point() : x(0), y(0) {}
    Point(double x, double y) : x(x), y(y) {}
    double getX() const { return x; }
    double getY() const { return y; }
    void setX(double x) { x = x; }
    void setY(double y) { y = y; }
};

class Line : public Drawable, public Figure
{
private:
    Point p1, p2;

public:
    void draw() override
    {
        cout << "Drawing a line where: " << endl;
        p1.draw();
        p2.draw();
        cout << endl;
    }
    Line() {}
    Line(Point &p1_, Point &p2_) : p1(p1_), p2(p2_) {}
    Point *getPoint1()
    {
        return &p1;
    }
    Point *getPoint2()
    {
        return &p2;
    }
    void setPoint1(Point &p) { p1 = p; }
    void setPoint2(Point &p) { p2 = p; }
};

class ColoredPoint : public Point, public IColored
{
    void draw() override
    {
        Point::draw();
        IColored::draw();
    }
    ColoredPoint() : Point()
    {
        this->setColor(Color());
    }
    ColoredPoint(double x, double y, Color color) : Point(x, y)
    {
        this->setColor(color);
    }
};

class ColoredLine : public Line, public IColored
{
public:
    void draw() override
    {
        Line::draw();
        IColored::draw();
    }
    ColoredLine() : Line()
    {
        this->setColor(Color());
    }
    ColoredLine(Point &p1_, Point &p2_, Color color) : Line(p1_, p2_)
    {
        this->setColor(color);
    }
};
class Polyline : public Drawable, public Figure
{
public:
    vector<Line> lines;
    Polyline(vector<Line> lines_)
    {
        for (int i = 0; i < lines_.size(); i++)
            this->lines.push_back(lines_[i]);
    }
    void draw() override
    {
        for (int i = 0; i < this->lines.size(); i++)
            this->lines[i].draw();
    }
};
class Picture: public Drawable
{
private:
    vector<Figure> elements;

public:
    Picture(vector<Figure> figures_)
    {
        this->elements = figures_;
    }
};
int main(int argc, char const *argv[])
{
    Point p1(2.5, 4);
    Point p2(6.5, 3);
    vector<Line> lines = {Line(p1, p2), Line(p1, p2), Line(p1, p2)};
    vector<Figure> figures = {Line(p1, p2), p1, p2};
    return 0;
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
/*                                                  */
/*               –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—Ç–µ üòä             */
/*                                                  */
/* –ü—Ä–∏ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —É –º–µ–Ω—è            */
/* –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏         */
/* –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∑–∞–¥—É–º–∫–µ      */
/* —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å             */
/* ColoredLine –æ—Ç Line, –æ–¥–Ω–∞–∫–æ –≤ —Ç–æ–º —Å–ª—É—á–∞–µ         */
/* –µ—Å–ª–∏ –º—ã –±—É–¥–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å —Ü–≤–µ—Ç–æ–º   */
/* –º—ã –º–æ–∂–µ–º –Ω–∞—Ä—É—à–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –ë–∞—Ä–±–∞—Ä—ã –õ–∏—Å–∫–æ–≤         */
/* soLid (Liskov substition principle)              */
/* –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ–±–µ—Å–ø–µ—á–∏—Ç—å          */
/* —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ—Ç–æ–º–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥ ChangeColor,  */
/* –ø–æ—ç—Ç–æ–º—É —è –ø—Ä–µ–¥–ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ –≤—ã–Ω–µ—Å—Ç–∏ —Å–∞–º–æ        */
/* –ø–æ–Ω—è—Ç–∏–µ —Ü–≤–µ—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∏ –ø—Ä–∏–º–µ–Ω—è—Ç—å           */
/* –µ–≥–æ —á–µ—Ä–µ–∑ –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π             */
/* –±—É–¥–µ—Ç –≤—ã—Å—Ç—É–ø–∞—Ç—å –≤ —Ä–æ–ª–∏ –Ω–µ–∫–æ–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.       */
/* –¢–∞–∫–∂–µ —è —Ä–µ—à–∏–ª —á—Ç–æ —Å–æ–∑–¥–∞–Ω–∏–µ –ë–∞–∑–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å        */
/* –Ω–∞–¥ –≤—Å–µ–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—â—É–Ω—Å—Ç–≤–æ–º –∏        */
/* –Ω–µ –Ω–µ—Å–µ—Ç –≤ —Å–µ–±–µ –Ω–∏–∫–∞–∫–æ–≥–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ          */
/* —ç—Ñ—Ñ–µ–∫—Ç–∞, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ —è —Å—Ç–∞—Ä–∞–ª—Å—è –∑–∞–º–µ–Ω—è—Ç—å        */
/* –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π, —è —Å—á–∏—Ç–∞—é —á—Ç–æ           */
/* —ç—Ç–æ –º–æ–∂–µ—Ç —É–±—Ä–∞—Ç—å –º–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞         */
/* –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞, –∫—Ä–æ–º–µ –ø—Ä–æ—á–µ–≥–æ            */
/* –ø—Ä–∏—à–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Å–µ–≤–¥–æ–±–∞–∑–æ–≤—É—é              */
/* –ø—Ä–æ—Å–ª–æ–π–∫—É –≤ –≤–∏–¥–µ –∫–ª–∞—Å—Å Figure,—è –µ–≥–æ —Å–æ–∑–¥–∞–ª       */ 
/* —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥—Ä—É–∂–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã     */
/* –≤ –æ–¥–Ω–æ–º –º–∞—Å—Å–∏–≤–µ (–ù—É–∂–Ω–æ –±—ã–ª–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è 2).      */
/*                                                  */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
