// –§–æ–º–∏—á–µ–≤ –ê–Ω–¥—Ä–µ–π –ú–∏—Ö–∞–π–ª–æ–≤–∏—á, II –í–∞—Ä–∏–∞–Ω—Ç
// –õ–†10

/*
–î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ü–≤–≤–µ—Ç–Ω—ã—Ö –ø–ª–∞–Ω—à–µ—Ç–Ω—ã—Ö —Å–∫–∞–Ω–µ—Ä–∞—Ö –æ–ø–∏—Å–∞—Ç—å 
—Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ –≤–∞—Ä–∏–∞–Ω—Ç–µ 1
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é,–∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã–µ 
–æ —Å–∫–∞–Ω–µ—Ä–µ –∏–∑ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: –≤ –ø–µ—Ä–≤—ã—Ö 
–¥–≤—É—Ö –±–∞–π—Ç–∞—Ö —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ int, –æ–ø—Ä–µ–¥–µ–ª—è—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 
—Å–¥–µ–ª–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª –∑–∞–ø–∏—Å–µ–π: –¥–∞–ª–µ–µ –±–µ–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —Ä–∞–∑–º–µ—â–∞—é—Ç—Å—è –∑–∞–ø–∏—Å–∏ –æ —Å–∫–∞–Ω–µ—Ä–∞—Ö.
–ù–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –æ–ø–∏—Å–∞–Ω–Ω–æ–º —Ä–∞–Ω–µ–µ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–∞–π–ª–µ 
–ø–æ –æ–¥–Ω–æ–π –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: —Ü–µ–Ω–∞ –ª–∏–±–æ —á–∏—Å–ª–æ –≥—Ä–∞–¥–∞—Ü–∏–π —Å–µ—Ä–æ–≥–æ,
–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - –ø—Ä–∏–∑–Ω–∞–∫ –∑–∞–¥–∞—é—â–∏–π –∫—Ä–∏—Ç–µ—Ä–∏–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–≤–∫–∏.
–ü—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–æ–∑–¥–∞—é—â–µ–π —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–∫–∞–Ω–µ—Ä–∞—Ö 
(–¥–∞–Ω–Ω—ã–µ –≤–≤–æ–¥—è—Ç—Å—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –∏–∑ –Ω–µ –º–µ–Ω–µ–µ –≤–æ—Å—å–º–∏ –∑–∞–ø–∏—Å–µ–π 
–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–µ–π –µ–≥–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É.
*/

// P.S. –ù–∞ a–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–∏–Ω–¥–µ –ª–∞–±–∞ –Ω–µ –∫–æ–º–ø–∏–ª–∏—Ç—Å—è
// –∏–∑-–∑–∞ —Ü—ã–≥–∞–Ω—Å–∫–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.cpp

#include <iostream>
#include <fstream>
#include <algorithm>
using namespace std;
struct scan_info
{
    int price;
    double x_size;
    double y_size;
    int optr;
    int grey;
    char model[5];
    scan_info() {}
    scan_info(int price, char m[],
              double x_size = 1.6, double y_size = 1.2,
              int optr = 2, int grey = 211)
    {
        this->price = price;
        for (int i = 0; i < 5; i++)
            this->model[i] = m[i];
        this->x_size = x_size;
        this->y_size = y_size;
        this->optr = optr;
        this->grey = grey;
    }
};
void readScaners(string filename)
{
    short S;
    int temp;
    ifstream input_file(filename, ios::binary);
    input_file.read((char *)&S, sizeof(S));
    scan_info s[8];
    for (int i = 0; i < S; i++)
    {
        input_file.read((char *)&s[i].price, sizeof(s[0].price));
        input_file.read((char *)&temp, 4);
        input_file.read((char *)&s[i].x_size, sizeof(s[0].x_size));
        input_file.read((char *)&s[i].y_size, sizeof(s[0].y_size));
        input_file.read((char *)&s[i].optr, sizeof(s[0].optr));
        input_file.read((char *)&s[i].grey, sizeof(s[0].grey));
        input_file.read((char *)&s[i].model, sizeof(s[0].model));
        cout << s[i].price << endl;
        input_file.read((char *)&temp, 3);
    }
    input_file.close();
}
void writeScaners(scan_info *a, string filename, short count=8)
{
    try
    {
        if (count < 1)
            throw(count);
        scan_info s[8];
        for (int i = 0; i < count; i++)
            s[i] = a[i];
        sort(s, s + count, [](auto s1, auto s2)
             {
            if(s1.price==s2.price)
                return s1.grey>s2.grey;
            else
                return s1.price>s2.price; });
        ofstream output_file(filename, ios::binary);
        output_file.write((char *)&count, sizeof(count));
        output_file.write((char *)&s, sizeof(s));
        output_file.close();
    }
    catch (const std::exception &e)
    {

        cerr << "Count must be positive integer";
    }
}
int main()
{
    char c[] = {'a', 'b', 'c', 'd', 'e'};
    scan_info a[] = {scan_info(165, c), scan_info(65, c),
     scan_info(625, c),scan_info(666, c), scan_info(5000, c),
      scan_info(13, c),scan_info(888, c), scan_info(71, c)};
    writeScaners(a, "scans.txt", 8);
    readScaners("scans.txt");
    return 0;
}

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
/*                                                           */
/*               –ü–æ—è—Å–Ω–µ–Ω–∏–µ –∫ —Ä–∞–±–æ—Ç–µ üòä                      */
/*                                                           */
/* –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–º–µ—á–∞–Ω–∏–π –∫ —ç—Ç–æ–π —Ä–∞–±–æ—Ç–µ                    */
/*                                                           */
/* 1) –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ç–æ—Ä—ã–π –æ–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Å–∫–∞–Ω–µ—Ä–æ–≤           */
/* —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–ø–∞ int, —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç              */
/* 4 –±–∞–π—Ç–∞, –∞ –Ω–µ 2 –∫–∞–∫ —ç—Ç–æ –Ω–∞–ø–∏—Å–∞–Ω–æ –≤ –∑–∞–¥–∞–Ω–∏–∏,               */
/* —ç—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ, –ø–æ—ç—Ç–æ–º—É —è –ø–æ–∑–≤–æ–ª–∏–ª —Å–µ–±–µ                      */
/* –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ short,                                   */
/*                                                           */
/* 2) –í —Ü–µ–ª—è—Ö –Ω–µ–±–æ–ª—å—à–æ–π —ç–∫–æ–Ω–æ–º–∏–∏ –±—É–∫–æ–≤–æ–∫                     */
/*  –∏–∑–º–µ–Ω–∏–ª –ø–æ–ª–µ model —Å char[25] –Ω–∞ char[5]                 */
/*                                                           */
/* –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –ø–∞—Ä—Ç–∏–µ–π                  */
/* –∑–∞–¥–∞—á—É, –≤–µ—Å—å–º–∞ —É—Å–ø–µ—à–Ω–æ, –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Å–æ–ª–∏                  */
/* –≤—ã–≤–æ–¥–∞ –ø–µ—á–∞—Ç–∞—é—Ç—Å—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ              */
/* —Ç—Ä–µ–±—É–µ–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.                                     */
/*                                                           */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

